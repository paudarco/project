'use strict';

// В регулярных выражения есть шаблоны (pattern) и флаги (flags)
// Для регулярных выражений есть 2 типа использования

// Шаблон - то, что мы ищем в строке
// Флаг - настройка выражения 
// Есть 3 основных флага:
// i - поиск вне зависимости от регистра
// g - поиск нескольких вложений
// m - многострочный режим
// и их можно комбинировать (gim, igm и т д как угодно)

// 1) Классический синтаксис, которым никто не пользуется
// new RegExp('pattert', 'flags');

// 2)
// /pattern/flags

const ans = prompt('Введите ваше имя:');

const reg = /n/ig;

// Также существуют символьные класса, обобщающие некоторые типы символов
// \d - цифры (digits)
// \w - слова (words)
// \s - пробелы (spaces)

const reg2 = /\d/g;
console.log(ans.match(reg2));

// Если мы хотим игнорировать все буквы или цифры и т д, то пишем класс с большой буквы
// \D \W \S

const string = 'my name is R2D2';

// Можем комбинировать классы. В этом случае мы ищем сочетание буква-цифра-буква-цифра
console.log(string.match(/\w\d\w\d/i));

// Можно проверить наличие паттерна в строке с помощью метода регулярного выражения test (вернет boolean)
// console.log(reg.test(ans));

// search выполняет поиск сопоставления между регулярным выражением и строкой, возвращает индекс первого вхождения
// console.log(ans.search(reg));

// match возвращает все вхождения
// console.log(ans.match(reg));

// const password = prompt('Введите пароль:');

// Одинокая точка в паттерне селектора выбирает абсолютно все символы в строке
// чтобы выбрать конкретно точку, нужно экранировать символ с помощью обратного слеша \.
// replace заменяет искомую подстроку из первого аргумента на второй аргумент
// console.log(password.replace(/\./g, '*'));